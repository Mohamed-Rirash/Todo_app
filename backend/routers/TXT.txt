from fastapi import APIRouter, Depends, status, HTTPException
import schemas, models
from passlib.context import CryptContext
from database import SessionLocal
from typing import Annotated
from sqlalchemy.orm import Session
from fastapi.security import OAuth2PasswordRequestForm, OAuth2PasswordBearer
from jose import jwt, JWTError
from datetime import timedelta, datetime

router = APIRouter(
    prefix='/auth',
    tags=['auth']
)

SECRET_KEY = '5f05227d8856cd0efbe9b88fd6d3491da174a93ef653d10c8184acd0dfb0ce99'
ALGORITHM = 'HS256'

Bcrypt_context = CryptContext(schemes=['bcrypt'], deprecated='auto')
oauth2_bearer = OAuth2PasswordBearer(tokenUrl='auth/token')

# ... (other code remains the same)

@router.post("/token/refresh", response_model=schemas.Token)
async def refresh_token(
    token: Annotated[str, Depends(oauth2_bearer)],
    db: db_dependency
):
    try:
        payload = jwt.decode(token, SECRET_KEY, algorithms=[ALGORITHM])
        username: str = payload.get('sub')
        user_id: int = payload.get('id')
        user_role: int = payload.get('role')
        if username is None or user_id is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="could not validate user")
        
        # Check if the user exists in the database (optional)
        user = db.query(models.Users).filter(models.Users.id == user_id).first()
        if user is None:
            raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="User not found")

        # Generate a new access token with the same user information
        new_token = create_access_token(username=username, user_id=user_id, role=user_role, expires_delta=timedelta(minutes=20))
        return {"access_token": new_token, "token_type": "bearer"}
    except JWTError:
        raise HTTPException(status_code=status.HTTP_401_UNAUTHORIZED, detail="could not validate user")

